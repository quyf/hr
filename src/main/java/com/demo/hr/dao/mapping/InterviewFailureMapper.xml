<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.demo.hr.dao.InterviewFailureDao" >

  <resultMap id="BaseResultMap" type="InterviewFailure" >
	<result column="id" property="id" jdbcType="INTEGER" />
	<result column="interview_id" property="interviewId" jdbcType="INTEGER" />
	<result column="feedback_id" property="feedbackId" jdbcType="INTEGER" />
	<result column="person_id" property="personId" jdbcType="INTEGER" />
	<result column="email" property="email" jdbcType="VARCHAR" />
	<result column="name" property="name" jdbcType="VARCHAR" />
	<result column="post" property="post" jdbcType="VARCHAR" />
	<result column="staff_id" property="staffId" jdbcType="INTEGER" />
	<result column="notify_time" property="notifyTime" jdbcType="TIMESTAMP" />
	<result column="notify_end_time" property="notifyEndTime" jdbcType="TIMESTAMP" />
	<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
	<result column="status" property="status" jdbcType="INTEGER" />
  </resultMap>
  
  <sql id="Criteria_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Update_By_Criteria_Where_Clause" >
    <where >
      <foreach collection="criteria.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  
  
  <sql id="Base_Column_List" >
    `id`,`interview_id`,`feedback_id`,`person_id`,`email`,`name`,`post`,`staff_id`,`notify_time`,`notify_end_time`,`create_time`,`status`
  </sql>  
  
  <insert id="insert" parameterType="InterviewFailure">
	<selectKey resultType="Integer" keyProperty="id" order="AFTER" > 
		select last_insert_id() as id 
	</selectKey> 
    insert into interview_failure
    <trim prefix="(" suffix=")" suffixOverrides="," >
		<if test="id != null" >
        	`id`,
    	</if>	
		<if test="interviewId != null" >
        	`interview_id`,
    	</if>	
		<if test="feedbackId != null" >
        	`feedback_id`,
    	</if>	
		<if test="personId != null" >
        	`person_id`,
    	</if>	
		<if test="email != null" >
        	`email`,
    	</if>	
		<if test="name != null" >
        	`name`,
    	</if>	
		<if test="post != null" >
        	`post`,
    	</if>	
		<if test="staffId != null" >
        	`staff_id`,
    	</if>	
		<if test="notifyTime != null" >
        	`notify_time`,
    	</if>	
		<if test="notifyEndTime != null" >
        	`notify_end_time`,
    	</if>	
		<if test="createTime != null" >
        	`create_time`,
    	</if>	
		<if test="status != null" >
        	`status`,
    	</if>	
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
		<if test="id != null" >
        	#{id,jdbcType=INTEGER},
    	</if>	
		<if test="interviewId != null" >
        	#{interviewId,jdbcType=INTEGER},
    	</if>	
		<if test="feedbackId != null" >
        	#{feedbackId,jdbcType=INTEGER},
    	</if>	
		<if test="personId != null" >
        	#{personId,jdbcType=INTEGER},
    	</if>	
		<if test="email != null" >
        	#{email,jdbcType=VARCHAR},
    	</if>	
		<if test="name != null" >
        	#{name,jdbcType=VARCHAR},
    	</if>	
		<if test="post != null" >
        	#{post,jdbcType=VARCHAR},
    	</if>	
		<if test="staffId != null" >
        	#{staffId,jdbcType=INTEGER},
    	</if>	
		<if test="notifyTime != null" >
        	#{notifyTime,jdbcType=TIMESTAMP},
    	</if>	
		<if test="notifyEndTime != null" >
        	#{notifyEndTime,jdbcType=TIMESTAMP},
    	</if>	
		<if test="createTime != null" >
        	#{createTime,jdbcType=TIMESTAMP},
    	</if>	
		<if test="status != null" >
        	#{status,jdbcType=INTEGER},
    	</if>	
    </trim>
  </insert>

  <delete id="deleteById" parameterType="Integer">
    delete from interview_failure where id = #{id,jdbcType=INTEGER}
  </delete>
  
  <delete id="delete" parameterType="com.demo.hr.entity.criteria.InterviewFailureCriteria">
    delete from interview_failure 
    <if test="_parameter != null" >
      <include refid="Criteria_Where_Clause" />
    </if>
  </delete>
 
  <update id="updateById" parameterType="InterviewFailure">
    update interview_failure
    <set>
		<if test="interviewId != null" >
        	`interview_id` = #{interviewId,jdbcType=INTEGER},
    	</if>	
		<if test="feedbackId != null" >
        	`feedback_id` = #{feedbackId,jdbcType=INTEGER},
    	</if>	
		<if test="personId != null" >
        	`person_id` = #{personId,jdbcType=INTEGER},
    	</if>	
		<if test="email != null" >
        	`email` = #{email,jdbcType=VARCHAR},
    	</if>	
		<if test="name != null" >
        	`name` = #{name,jdbcType=VARCHAR},
    	</if>	
		<if test="post != null" >
        	`post` = #{post,jdbcType=VARCHAR},
    	</if>	
		<if test="staffId != null" >
        	`staff_id` = #{staffId,jdbcType=INTEGER},
    	</if>	
		<if test="notifyTime != null" >
        	`notify_time` = #{notifyTime,jdbcType=TIMESTAMP},
    	</if>	
		<if test="notifyEndTime != null" >
        	`notify_end_time` = #{notifyEndTime,jdbcType=TIMESTAMP},
    	</if>	
		<if test="createTime != null" >
        	`create_time` = #{createTime,jdbcType=TIMESTAMP},
    	</if>	
		<if test="status != null" >
        	`status` = #{status,jdbcType=INTEGER},
    	</if>	
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
    
  <update id="update" parameterType="map">
    update interview_failure 
    <set>
		<if test="record.interviewId != null" >
        	`interview_id` = #{record.interviewId,jdbcType=INTEGER},
    	</if>	
		<if test="record.feedbackId != null" >
        	`feedback_id` = #{record.feedbackId,jdbcType=INTEGER},
    	</if>	
		<if test="record.personId != null" >
        	`person_id` = #{record.personId,jdbcType=INTEGER},
    	</if>	
		<if test="record.email != null" >
        	`email` = #{record.email,jdbcType=VARCHAR},
    	</if>	
		<if test="record.name != null" >
        	`name` = #{record.name,jdbcType=VARCHAR},
    	</if>	
		<if test="record.post != null" >
        	`post` = #{record.post,jdbcType=VARCHAR},
    	</if>	
		<if test="record.staffId != null" >
        	`staff_id` = #{record.staffId,jdbcType=INTEGER},
    	</if>	
		<if test="record.notifyTime != null" >
        	`notify_time` = #{record.notifyTime,jdbcType=TIMESTAMP},
    	</if>	
		<if test="record.notifyEndTime != null" >
        	`notify_end_time` = #{record.notifyEndTime,jdbcType=TIMESTAMP},
    	</if>	
		<if test="record.createTime != null" >
        	`create_time` = #{record.createTime,jdbcType=TIMESTAMP},
    	</if>	
		<if test="record.status != null" >
        	`status` = #{record.status,jdbcType=INTEGER},
    	</if>	
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Criteria_Where_Clause" />
    </if>
  </update>
    
  <select id="count" parameterType="com.demo.hr.entity.criteria.InterviewFailureCriteria" resultType="java.lang.Integer">
    select count(*) from interview_failure 
    <if test="_parameter != null" >
      <include refid="Criteria_Where_Clause" />
    </if>
  </select>
  
  <select id="selectById" resultMap="BaseResultMap" parameterType="Integer">
    select 
    <include refid="Base_Column_List" />
    from interview_failure 
    where id = #{id,jdbcType=INTEGER}
  </select>
    
   <select id="selectByInterviewId" resultMap="BaseResultMap" parameterType="Integer">
    select 
    <include refid="Base_Column_List" />
    from interview_failure 
    where interview_id = #{interviewId,jdbcType=INTEGER}
    limit 1
  </select>
  
  <select id="select" resultMap="BaseResultMap" parameterType="com.demo.hr.entity.criteria.InterviewFailureCriteria">
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from interview_failure 
    <if test="_parameter != null" >
      <include refid="Criteria_Where_Clause" />
    </if>
    <if test="sort != null" >
		<if test="sort == 'id'">
			order by `id` ${order}	
		</if>
		<if test="sort == 'interviewId'">
			order by `interview_id` ${order}	
		</if>
		<if test="sort == 'feedbackId'">
			order by `feedback_id` ${order}	
		</if>
		<if test="sort == 'personId'">
			order by `person_id` ${order}	
		</if>
		<if test="sort == 'email'">
			order by `email` ${order}	
		</if>
		<if test="sort == 'name'">
			order by `name` ${order}	
		</if>
		<if test="sort == 'post'">
			order by `post` ${order}	
		</if>
		<if test="sort == 'staffId'">
			order by `staff_id` ${order}	
		</if>
		<if test="sort == 'notifyTime'">
			order by `notify_time` ${order}	
		</if>
		<if test="sort == 'notifyEndTime'">
			order by `notify_end_time` ${order}	
		</if>
		<if test="sort == 'createTime'">
			order by `create_time` ${order}	
		</if>
		<if test="sort == 'status'">
			order by `status` ${order}	
		</if>
    </if>
  </select>  
  
</mapper>